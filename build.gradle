/*
 * This file is part of dependency-check-gradle.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Copyright (c) 2015 Wei Ma. All Rights Reserved.
 */

ext {
    odcVersion = '6.4.1'
    slackWebhookVersion = '1.4.0'
    spockCoreVersion = '1.1-groovy-2.4'
}

group = 'org.owasp'
version = "$odcVersion.1"

buildscript {
    repositories {
        mavenLocal()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.11.0"
    }
}

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'project-report'
apply plugin: 'build-dashboard'
apply plugin: 'com.gradle.plugin-publish'

tasks.withType(GroovyCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

repositories {
    mavenLocal()
    maven {
        name 'OWASP dependency-check snapshot'
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    mavenCentral()
}

dependencies {
    implementation(
            localGroovy(),
            gradleApi(),
            "org.owasp:dependency-check-core:$odcVersion",
            "org.owasp:dependency-check-utils:$odcVersion",
            "net.gpedro.integrations.slack:slack-webhook:$slackWebhookVersion"
    )

    testImplementation gradleTestKit()
    testImplementation("org.spockframework:spock-core:$spockCoreVersion") {
        exclude module: 'groovy-all'
    }
}

test {
    filter {
        includeTestsMatching "*IntegSpec"
        includeTestsMatching "*PluginSpec"
    }
}


task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}



artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId "$group"
            artifactId 'dependency-check-gradle'
            version "$version"

            from components.java

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'OWASP dependency-check gradle plugin is a software ' +
                    'composition analysis tool used to find known vulnerable dependencies.'
            name 'dependency-check-gradle'
            url 'https://jeremylong.github.io/DependencyCheck/'
            organization {
                name 'org.owasp'
                url 'https://owasp.org/'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/dependency-check/dependency-check-gradle/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/dependency-check/dependency-check-gradle/blob/main/LICENSE.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/dependency-check/dependency-check-gradle'
                connection 'scm:git:https://github.com/dependency-check/dependency-check-gradle.git'
                developerConnection 'scm:git:https://github.com/dependency-check/dependency-check-gradle.git'
            }
            developers {
                developer {
                    name 'Jeremy Long'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

pluginBundle {
    website = 'http://jeremylong.github.io/DependencyCheck/dependency-check-gradle/index.html'
    vcsUrl = 'https://github.com/dependency-check/dependency-check-gradle/'
    description = 'A software composition analysis plugin that identifies known vulnerable dependencies used by the project.'
    tags = ['OWASP', 'dependency-check', 'gradle-plugin', 'software-composition-analysis', 'vulnerability-detection', 'security']

    plugins {
        dependencyCheck {
            id = 'org.owasp.dependencycheck'
            displayName = 'OWASP dependency-check-gradle plugin'
        }
    }
    mavenCoordinates {
        groupId = "org.owasp"
    }
}

publish.dependsOn publishPlugins

defaultTasks 'build'
